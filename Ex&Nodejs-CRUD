//Ass-9-->Write code using Node.js and Express.js to create a back-end server. Create basic routes to serve static files and JSON data, then extend it to include a RESTful API with GET, POST, PUT, and DELETE operations for a student data object. Test all routes using Postman.
// server.js
const express = require("express");
const bodyParser = require("body-parser");
const path = require("path");

const app = express();
const PORT = 3000;

// Middleware to parse JSON requests
app.use(bodyParser.json());

// Serve static files from 'public' folder (optional)
app.use(express.static(path.join(__dirname, "public")));

// Basic JSON route
app.get("/api/message", (req, res) => {
  res.json({ message: "Hello from the server!" });
});

// In-memory student data
let students = [
  { id: 1, name: "Alice", age: 20 },
  { id: 2, name: "Bob", age: 22 },
];

// RESTful API routes

// GET all students
app.get("/api/students", (req, res) => {
  res.json(students);
});

// GET student by ID
app.get("/api/students/:id", (req, res) => {
  const student = students.find(s => s.id === parseInt(req.params.id));
  if (!student) return res.status(404).json({ error: "Student not found" });
  res.json(student);
});

// POST new student
app.post("/api/students", (req, res) => {
  const { name, age } = req.body;
  if (!name || !age) {
    return res.status(400).json({ error: "Name and age are required" });
  }
  const newStudent = { id: students.length + 1, name, age };
  students.push(newStudent);
  res.status(201).json(newStudent);
});

// PUT update student
app.put("/api/students/:id", (req, res) => {
  const student = students.find(s => s.id === parseInt(req.params.id));
  if (!student) return res.status(404).json({ error: "Student not found" });

  const { name, age } = req.body;
  if (name) student.name = name;
  if (age) student.age = age;

  res.json(student);
});

// DELETE student
app.delete("/api/students/:id", (req, res) => {
  const index = students.findIndex(s => s.id === parseInt(req.params.id));
  if (index === -1) return res.status(404).json({ error: "Student not found" });

  const deleted = students.splice(index, 1);
  res.json(deleted[0]);
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
